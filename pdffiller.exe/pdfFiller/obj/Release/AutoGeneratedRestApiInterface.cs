// Decompiled with JetBrains decompiler
// Type: pdfFiller.data_manager.api.AutoGeneratedRestApiInterface
// Assembly: pdfFiller, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: AEBF2585-E3E0-4E31-BEF4-9C2E935A9144
// Assembly location: D:\pdfFiller\pdfFiller.exe

using Newtonsoft.Json.Linq;
using pdfFiller.data_manager.model;
using pdfFiller.Model.Pojo.Data.User;
using pdfFiller.Model.Pojo.Response;
using pdfFiller.RefitInternalGenerated;
using Refit;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Net.Http;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

#nullable disable
namespace pdfFiller.data_manager.api;

[ExcludeFromCodeCoverage]
[DebuggerNonUserCode]
[Preserve]
[Obfuscation(Exclude = true)]
internal class AutoGeneratedRestApiInterface : RestApiInterface
{
  private readonly IRequestBuilder requestBuilder;

  public HttpClient Client { get; protected set; }

  public AutoGeneratedRestApiInterface(HttpClient client, IRequestBuilder requestBuilder)
  {
    this.Client = client;
    this.requestBuilder = requestBuilder;
  }

  Task<LoginResponse> RestApiInterface.LoginOrSignUp(
    string loginOrSignUp,
    Dictionary<string, object> data)
  {
    object[] objArray = new object[2]
    {
      (object) loginOrSignUp,
      (object) data
    };
    return (Task<LoginResponse>) this.requestBuilder.BuildRestResultFuncForMethod("LoginOrSignUp", new Type[2]
    {
      typeof (string),
      typeof (Dictionary<string, object>)
    })(this.Client, objArray);
  }

  Task<LoginResponse> RestApiInterface.SocialLoginOrSignUp(
    string type,
    string code,
    string deviceId)
  {
    object[] objArray = new object[3]
    {
      (object) type,
      (object) code,
      (object) deviceId
    };
    return (Task<LoginResponse>) this.requestBuilder.BuildRestResultFuncForMethod("SocialLoginOrSignUp", new Type[3]
    {
      typeof (string),
      typeof (string),
      typeof (string)
    })(this.Client, objArray);
  }

  Task<FillerResponse<object>> RestApiInterface.ForgotPassword(string email)
  {
    object[] objArray = new object[1]{ (object) email };
    return (Task<FillerResponse<object>>) this.requestBuilder.BuildRestResultFuncForMethod("ForgotPassword", new Type[1]
    {
      typeof (string)
    })(this.Client, objArray);
  }

  Task<pdfFiller.Model.Pojo.Data.User.User> RestApiInterface.GetUserInfo(
    string token,
    string userId)
  {
    object[] objArray = new object[2]
    {
      (object) token,
      (object) userId
    };
    return (Task<pdfFiller.Model.Pojo.Data.User.User>) this.requestBuilder.BuildRestResultFuncForMethod("GetUserInfo", new Type[2]
    {
      typeof (string),
      typeof (string)
    })(this.Client, objArray);
  }

  Task<AgreementStatusResponse> RestApiInterface.checkPrivacyInfo(string token, string userId)
  {
    object[] objArray = new object[2]
    {
      (object) token,
      (object) userId
    };
    return (Task<AgreementStatusResponse>) this.requestBuilder.BuildRestResultFuncForMethod("checkPrivacyInfo", new Type[2]
    {
      typeof (string),
      typeof (string)
    })(this.Client, objArray);
  }

  Task<TOSStatusResponse> RestApiInterface.AcceptTOS(string token, string userId)
  {
    object[] objArray = new object[2]
    {
      (object) token,
      (object) userId
    };
    return (Task<TOSStatusResponse>) this.requestBuilder.BuildRestResultFuncForMethod("AcceptTOS", new Type[2]
    {
      typeof (string),
      typeof (string)
    })(this.Client, objArray);
  }

  Task<UserSubscription> RestApiInterface.GetSubscription(string token, string userId)
  {
    object[] objArray = new object[2]
    {
      (object) token,
      (object) userId
    };
    return (Task<UserSubscription>) this.requestBuilder.BuildRestResultFuncForMethod("GetSubscription", new Type[2]
    {
      typeof (string),
      typeof (string)
    })(this.Client, objArray);
  }

  Task<FoldersStructureResponse> RestApiInterface.GetFoldersStructure(
    string token,
    string userId,
    string folderId,
    CancellationToken cancelToken,
    string showSharedSubfolders)
  {
    object[] objArray = new object[5]
    {
      (object) token,
      (object) userId,
      (object) folderId,
      (object) cancelToken,
      (object) showSharedSubfolders
    };
    return (Task<FoldersStructureResponse>) this.requestBuilder.BuildRestResultFuncForMethod("GetFoldersStructure", new Type[5]
    {
      typeof (string),
      typeof (string),
      typeof (string),
      typeof (CancellationToken),
      typeof (string)
    })(this.Client, objArray);
  }

  Task<FoldersStructureResponse> RestApiInterface.GetFoldersStructure(
    string token,
    string userId,
    string folderId)
  {
    object[] objArray = new object[3]
    {
      (object) token,
      (object) userId,
      (object) folderId
    };
    return (Task<FoldersStructureResponse>) this.requestBuilder.BuildRestResultFuncForMethod("GetFoldersStructure", new Type[3]
    {
      typeof (string),
      typeof (string),
      typeof (string)
    })(this.Client, objArray);
  }

  Task<ProjectsStructureResponse> RestApiInterface.GetProjectsStructure(
    string token,
    string userId,
    string folderId,
    string nameSort,
    string typeSort,
    int? limit,
    int? tabId,
    string search,
    int page,
    CancellationToken cancellationToken)
  {
    object[] objArray = new object[10]
    {
      (object) token,
      (object) userId,
      (object) folderId,
      (object) nameSort,
      (object) typeSort,
      (object) limit,
      (object) tabId,
      (object) search,
      (object) page,
      (object) cancellationToken
    };
    return (Task<ProjectsStructureResponse>) this.requestBuilder.BuildRestResultFuncForMethod("GetProjectsStructure", new Type[10]
    {
      typeof (string),
      typeof (string),
      typeof (string),
      typeof (string),
      typeof (string),
      AutoGeneratedRestApiInterface.ToNullable(typeof (int)),
      AutoGeneratedRestApiInterface.ToNullable(typeof (int)),
      typeof (string),
      typeof (int),
      typeof (CancellationToken)
    })(this.Client, objArray);
  }

  Task<ProjectsStructureResponse> RestApiInterface.SearchDocuments(
    string token,
    string userId,
    string query,
    int page,
    CancellationToken cancellationToken,
    int limit)
  {
    object[] objArray = new object[6]
    {
      (object) token,
      (object) userId,
      (object) query,
      (object) page,
      (object) cancellationToken,
      (object) limit
    };
    return (Task<ProjectsStructureResponse>) this.requestBuilder.BuildRestResultFuncForMethod("SearchDocuments", new Type[6]
    {
      typeof (string),
      typeof (string),
      typeof (string),
      typeof (int),
      typeof (CancellationToken),
      typeof (int)
    })(this.Client, objArray);
  }

  Task<ProjectsStructureResponse> RestApiInterface.GetRecents(
    string token,
    string userId,
    string nameSort,
    string typeSort,
    int? limit,
    int? tabId,
    int? dashboardTab,
    string folderId)
  {
    object[] objArray = new object[8]
    {
      (object) token,
      (object) userId,
      (object) nameSort,
      (object) typeSort,
      (object) limit,
      (object) tabId,
      (object) dashboardTab,
      (object) folderId
    };
    return (Task<ProjectsStructureResponse>) this.requestBuilder.BuildRestResultFuncForMethod("GetRecents", new Type[8]
    {
      typeof (string),
      typeof (string),
      typeof (string),
      typeof (string),
      AutoGeneratedRestApiInterface.ToNullable(typeof (int)),
      AutoGeneratedRestApiInterface.ToNullable(typeof (int)),
      AutoGeneratedRestApiInterface.ToNullable(typeof (int)),
      typeof (string)
    })(this.Client, objArray);
  }

  Task<UploadResponse> RestApiInterface.UploadFile(
    string token,
    string userId,
    long folderId,
    StreamPart stream)
  {
    object[] objArray = new object[4]
    {
      (object) token,
      (object) userId,
      (object) folderId,
      (object) stream
    };
    return (Task<UploadResponse>) this.requestBuilder.BuildRestResultFuncForMethod("UploadFile", new Type[4]
    {
      typeof (string),
      typeof (string),
      typeof (long),
      typeof (StreamPart)
    })(this.Client, objArray);
  }

  Task<JObject> RestApiInterface.GetModule(string token, string userId, string module)
  {
    object[] objArray = new object[3]
    {
      (object) token,
      (object) userId,
      (object) module
    };
    return (Task<JObject>) this.requestBuilder.BuildRestResultFuncForMethod("GetModule", new Type[3]
    {
      typeof (string),
      typeof (string),
      typeof (string)
    })(this.Client, objArray);
  }

  Task<JObject> RestApiInterface.GetModuleV2(string token, string userId, string module)
  {
    object[] objArray = new object[3]
    {
      (object) token,
      (object) userId,
      (object) module
    };
    return (Task<JObject>) this.requestBuilder.BuildRestResultFuncForMethod("GetModuleV2", new Type[3]
    {
      typeof (string),
      typeof (string),
      typeof (string)
    })(this.Client, objArray);
  }

  Task<JObject> RestApiInterface.AddProjectByLink(
    string token,
    string userId,
    long folderId,
    string url)
  {
    object[] objArray = new object[4]
    {
      (object) token,
      (object) userId,
      (object) folderId,
      (object) url
    };
    return (Task<JObject>) this.requestBuilder.BuildRestResultFuncForMethod("AddProjectByLink", new Type[4]
    {
      typeof (string),
      typeof (string),
      typeof (long),
      typeof (string)
    })(this.Client, objArray);
  }

  Task<FillerResponse<pdfFiller.Model.Pojo.Data.Project>> RestApiInterface.GetProjectById(
    string token,
    string userId,
    long projectId,
    long folderId)
  {
    object[] objArray = new object[4]
    {
      (object) token,
      (object) userId,
      (object) projectId,
      (object) folderId
    };
    return (Task<FillerResponse<pdfFiller.Model.Pojo.Data.Project>>) this.requestBuilder.BuildRestResultFuncForMethod("GetProjectById", new Type[4]
    {
      typeof (string),
      typeof (string),
      typeof (long),
      typeof (long)
    })(this.Client, objArray);
  }

  Task<ProjectInfoResponse> RestApiInterface.GetProjectInfo(
    string token,
    string userId,
    long projectId)
  {
    object[] objArray = new object[3]
    {
      (object) token,
      (object) userId,
      (object) projectId
    };
    return (Task<ProjectInfoResponse>) this.requestBuilder.BuildRestResultFuncForMethod("GetProjectInfo", new Type[3]
    {
      typeof (string),
      typeof (string),
      typeof (long)
    })(this.Client, objArray);
  }

  Task<FillerResponse<SaveAsResponse>> RestApiInterface.SaveAs(
    string token,
    string userId,
    long projectId,
    Dictionary<string, object> data)
  {
    object[] objArray = new object[4]
    {
      (object) token,
      (object) userId,
      (object) projectId,
      (object) data
    };
    return (Task<FillerResponse<SaveAsResponse>>) this.requestBuilder.BuildRestResultFuncForMethod("SaveAs", new Type[4]
    {
      typeof (string),
      typeof (string),
      typeof (long),
      typeof (Dictionary<string, object>)
    })(this.Client, objArray);
  }

  Task<FillerResponse<object>> RestApiInterface.Delete(
    string token,
    string userId,
    Dictionary<string, object> data)
  {
    object[] objArray = new object[3]
    {
      (object) token,
      (object) userId,
      (object) data
    };
    return (Task<FillerResponse<object>>) this.requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[3]
    {
      typeof (string),
      typeof (string),
      typeof (Dictionary<string, object>)
    })(this.Client, objArray);
  }

  Task<FillerResponse<object>> RestApiInterface.DeleteFromTash(
    string token,
    string userId,
    Dictionary<string, object> data)
  {
    object[] objArray = new object[3]
    {
      (object) token,
      (object) userId,
      (object) data
    };
    return (Task<FillerResponse<object>>) this.requestBuilder.BuildRestResultFuncForMethod("DeleteFromTash", new Type[3]
    {
      typeof (string),
      typeof (string),
      typeof (Dictionary<string, object>)
    })(this.Client, objArray);
  }

  Task<FillerResponse<object>> RestApiInterface.RestoreFromTash(
    string token,
    string userId,
    Dictionary<string, object> data)
  {
    object[] objArray = new object[3]
    {
      (object) token,
      (object) userId,
      (object) data
    };
    return (Task<FillerResponse<object>>) this.requestBuilder.BuildRestResultFuncForMethod("RestoreFromTash", new Type[3]
    {
      typeof (string),
      typeof (string),
      typeof (Dictionary<string, object>)
    })(this.Client, objArray);
  }

  Task<FillerResponse<object>> RestApiInterface.AddToMyForms(
    string token,
    string userId,
    Dictionary<string, object> data)
  {
    object[] objArray = new object[3]
    {
      (object) token,
      (object) userId,
      (object) data
    };
    return (Task<FillerResponse<object>>) this.requestBuilder.BuildRestResultFuncForMethod("AddToMyForms", new Type[3]
    {
      typeof (string),
      typeof (string),
      typeof (Dictionary<string, object>)
    })(this.Client, objArray);
  }

  Task<UniqueFileNameResponse> RestApiInterface.GetUniqueName(
    string token,
    string userId,
    long projectId)
  {
    object[] objArray = new object[3]
    {
      (object) token,
      (object) userId,
      (object) projectId
    };
    return (Task<UniqueFileNameResponse>) this.requestBuilder.BuildRestResultFuncForMethod("GetUniqueName", new Type[3]
    {
      typeof (string),
      typeof (string),
      typeof (long)
    })(this.Client, objArray);
  }

  Task<CopyTemplateResponse> RestApiInterface.CopyTemplate(
    string token,
    string userId,
    long projectId,
    Dictionary<string, object> data)
  {
    object[] objArray = new object[4]
    {
      (object) token,
      (object) userId,
      (object) projectId,
      (object) data
    };
    return (Task<CopyTemplateResponse>) this.requestBuilder.BuildRestResultFuncForMethod("CopyTemplate", new Type[4]
    {
      typeof (string),
      typeof (string),
      typeof (long),
      typeof (Dictionary<string, object>)
    })(this.Client, objArray);
  }

  Task<FillerResponse<object>> RestApiInterface.RenameFolder(
    string token,
    string userId,
    long folderId,
    Dictionary<string, object> data)
  {
    object[] objArray = new object[4]
    {
      (object) token,
      (object) userId,
      (object) folderId,
      (object) data
    };
    return (Task<FillerResponse<object>>) this.requestBuilder.BuildRestResultFuncForMethod("RenameFolder", new Type[4]
    {
      typeof (string),
      typeof (string),
      typeof (long),
      typeof (Dictionary<string, object>)
    })(this.Client, objArray);
  }

  Task<FillerResponse<object>> RestApiInterface.RenameProject(
    string token,
    string userId,
    long projectId,
    Dictionary<string, object> data)
  {
    object[] objArray = new object[4]
    {
      (object) token,
      (object) userId,
      (object) projectId,
      (object) data
    };
    return (Task<FillerResponse<object>>) this.requestBuilder.BuildRestResultFuncForMethod("RenameProject", new Type[4]
    {
      typeof (string),
      typeof (string),
      typeof (long),
      typeof (Dictionary<string, object>)
    })(this.Client, objArray);
  }

  Task<FillerResponse<object>> RestApiInterface.CreateTemplate(
    string token,
    string userId,
    Dictionary<string, object> data)
  {
    object[] objArray = new object[3]
    {
      (object) token,
      (object) userId,
      (object) data
    };
    return (Task<FillerResponse<object>>) this.requestBuilder.BuildRestResultFuncForMethod("CreateTemplate", new Type[3]
    {
      typeof (string),
      typeof (string),
      typeof (Dictionary<string, object>)
    })(this.Client, objArray);
  }

  Task<PermissionResponse> RestApiInterface.CheckPermission(
    string token,
    string userId,
    string action,
    long projectId,
    long systemId)
  {
    object[] objArray = new object[5]
    {
      (object) token,
      (object) userId,
      (object) action,
      (object) projectId,
      (object) systemId
    };
    return (Task<PermissionResponse>) this.requestBuilder.BuildRestResultFuncForMethod("CheckPermission", new Type[5]
    {
      typeof (string),
      typeof (string),
      typeof (string),
      typeof (long),
      typeof (long)
    })(this.Client, objArray);
  }

  Task<object> RestApiInterface.EmptyTrash(string token, string userId)
  {
    object[] objArray = new object[2]
    {
      (object) token,
      (object) userId
    };
    return (Task<object>) this.requestBuilder.BuildRestResultFuncForMethod("EmptyTrash", new Type[2]
    {
      typeof (string),
      typeof (string)
    })(this.Client, objArray);
  }

  private static Type ToNullable(Type type)
  {
    if (!type.IsValueType)
      return type;
    return typeof (Nullable<>).MakeGenericType(type);
  }
}
